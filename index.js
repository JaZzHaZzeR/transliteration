const converter = {
	–∞: 'a',
	–±: 'b',
	–≤: 'v',
	–≥: 'g',
	–¥: 'd',
	–µ: 'e',
	—ë: 'e',
	–∂: 'zh',
	–∑: 'z',
	–∏: 'i',
	–π: 'y',
	–∫: 'k',
	–ª: 'l',
	–º: 'm',
	–Ω: 'n',
	–æ: 'o',
	–ø: 'p',
	—Ä: 'r',
	—Å: 's',
	—Ç: 't',
	—É: 'u',
	—Ñ: 'f',
	—Ö: 'h',
	—Ü: 'c',
	—á: 'ch',
	—à: 'sh',
	—â: 'sch',
	—å: '',
	—ã: 'y',
	—ä: '',
	—ç: 'e',
	—é: 'yu',
	—è: 'ya',
	–ê: 'A',
	–ë: 'B',
	–í: 'V',
	–ì: 'G',
	–î: 'D',
	–ï: 'E',
	–Å: 'E',
	–ñ: 'Zh',
	–ó: 'Z',
	–ò: 'I',
	–ô: 'Y',
	–ö: 'K',
	–õ: 'L',
	–ú: 'M',
	–ù: 'N',
	–û: 'O',
	–ü: 'P',
	–†: 'R',
	–°: 'S',
	–¢: 'T',
	–£: 'U',
	–§: 'F',
	–•: 'H',
	–¶: 'C',
	–ß: 'Ch',
	–®: 'Sh',
	–©: 'Sch',
	–¨: '',
	–´: 'Y',
	–™: '',
	–≠: 'E',
	–Æ: 'Yu',
	–Ø: 'Ya',
};

const data = [{ id: 1, rus: '–ü—Ä–∏–≤–µ—Ç üëãüèª', eng: 'Privet' }];
const btnPush = document.querySelector('#btn-add');
const inputText = document.querySelector('.text');
const buttonDelete = document.querySelector('.img-right');
const buttonDelAll = document.querySelector('.btn-clear');

// –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ input —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –æ–±—ä–µ–∫—Ç–∞
function tranaslit(str) {
	let result = '';
	for (let i = 0; i < str.length; i += 1) {
		const char = str[i];
		if (converter[char]) {
			result += converter[char];
		} else {
			result += str[i]; // –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ Privet - Privet
		}
	}
	return result;
}
//—Å—Ç–∞–≤–ª—é —Å–∏–º–≤–æ–ª '‚Ä¶' –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –±–æ–ª—å—à–µ 7 —Å–∏–º–≤–æ–ª–æ–≤
function hidden(str) {
	if (str.length > 7) {
		return str.slice(0, 7) + '‚Ä¶';
	}
	return str;
}

const tooltipHandler = element => {
	// –Ω–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∫–æ–π
	element.addEventListener('mouseover', event => {
		const tooltip = document.createElement('div');
		tooltip.className = 'tooltip'
		tooltip.innerText = event.target.getAttribute('title'); // –¥–æ—Å—Ç–∞–µ–º title –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–≤–µ–ª–∏ –º—ã—à–∫—É
		document.body.appendChild(tooltip); // –¥–æ–±–∞–≤–∏–ª

		const rect = event.target.getBoundingClientRect(); // d–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–µ–ª–µ–º–µ–Ω—Ç–∞ –≤ (—Ç–∞—Ä–≥–∏—Ç–µ span –∫–ª–∞—Å—Å word)
		const tooltipRect = tooltip.getBoundingClientRect(); // —Ä–∞–∑–º–µ—Ä tooltip

		tooltip.style.top = `${rect.top - tooltipRect.height}px`; // –æ—Ç—Å—Ç—É–ø—ã —Ç–æ–ø –∏ –ª–µ–≤–æ
		tooltip.style.left = `${rect.left}px`;
	});

	element.addEventListener('mouseout', event => {
		const tooltip = document.querySelector('.tooltip');
		if (tooltip) tooltip.remove()
	});
};

const parseElements = data => {
	const oldLeftUl = document.querySelector('.table-left-list'); // –Ω–∞—à–ª–∏ —Å—Ç–∞—Ä—É—é
	const oldRightUl = document.querySelector('.table-right-list');
	const leftUl = document.createElement('ul'); // —Å–æ–∑–¥–∞–ª –Ω–æ–≤—É—é
	const rightUl = document.createElement('ul');
	leftUl.className = 'table-left-list';
	rightUl.className = 'table-right-list';

	data.forEach((el, i) => {
		//–ª–µ–≤—ã–µ
		const liRus = document.createElement('li');
		const number = document.createElement('span');
		const wordRus = document.createElement('span');
		number.className = 'number';
		wordRus.className = 'word';
		number.innerText = i + 1;
		wordRus.innerText = Number(el.id) !== 1 ? hidden(el.rus) : el.rus; // –Ω–µ –æ–±—Ä–µ–∑–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
		wordRus.title = el.rus;
		tooltipHandler(wordRus); // –ø–æ–≤–µ—Å–∏–ª –º–∞—É—Å —Å–ª—É—à–∞—Ç–µ–ª—å
		liRus.appendChild(number);
		liRus.appendChild(wordRus);
		leftUl.appendChild(liRus);

		//–ø—Ä–∞–≤—ã–π
		const liEng = document.createElement('li');
		const wordEng = document.createElement('span');
		const buttonDel = document.createElement('img');
		liEng.id = el.id;// id
		buttonDel.className = 'img-right';
		buttonDel.src = './icons/cross.svg';
		wordEng.className = 'word';
		wordEng.title = el.eng;
		wordEng.innerText = hidden(el.eng);
		liEng.appendChild(wordEng);
		liEng.appendChild(buttonDel);
		rightUl.appendChild(liEng);
		buttonDel.addEventListener('click', deleteElement);
		tooltipHandler(wordEng);
	});

	oldLeftUl.innerHTML = '';
	oldLeftUl.append(leftUl); // –¥–æ–±–∞–≤–∏–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
	oldRightUl.innerHTML = '';
	oldRightUl.append(rightUl);//
};

function buttonHandler(event) {
	event.preventDefault();
	const rus = inputText.value;
	const eng = tranaslit(rus);

	if (rus.length) {
		const currentDate = new Date();
		// console.log(currentDate)
		const id = currentDate.getTime(); // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∏—Å–ª–∞
		// console.log(id)

		data.push({ id, rus, eng });

		parseElements(data);
		inputText.value = '';
	}
}

// –∫–ª–∏–∫ –∫–Ω–æ–ø–∫–∞ –î–æ–±–∞–≤–∏—Ç—å
btnPush.addEventListener('click', event => {
	buttonHandler(event);
});

//–∫–ª–∏–∫ –∫–Ω–æ–ø–∫–∞ –î–æ–±–∞–≤–∏—Ç—å –ø–æ Enter
inputText.addEventListener('keydown', event => {
	if (event.key === 'Enter') {
		buttonHandler(event);
	}
});

buttonDelete.addEventListener('click', deleteElement);

function deleteElement(event) {
	event.preventDefault();
	const elementId = event.target.parentElement.id;// –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π id
	// console.log(elementId)
	// console.log(data.findIndex(el => el.id === Number(elementId)))
	console.log(data)
	if (elementId !== '1') {
		data.splice(
			data.findIndex(el => el.id === Number(elementId)),
			1
		);
		parseElements(data); // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤. data
	}
}

buttonDelAll.addEventListener('click', event => {
	event.preventDefault();
	const filteredData = data.filter(el => el.id === 1);
	data.splice(0, data.length, ...filteredData); //—É–¥–∞–ª–µ–º –≤—Å–µ, –¥–æ–±–∞–≤–ª—è–µ–º  filteredData
	parseElements(data); // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
});